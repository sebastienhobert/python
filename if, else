txt = "The best things in life are free!"
if "free" in txt:
  print("Yes, 'free' is present.")
else:
    print("No, 'free' is present.")
    

#Else
#The else keyword catches anything which isn't caught by the preceding conditions.
a = 200
b = 33
if b > a:
  print("b is greater than a")
elif a == b:
  print("a and b are equal")
else:
  print("a is greater than b")


#Short Hand If
#If you have only one statement to execute, you can put it on the same line as the if statement.
a = 33
b = 30
if a > b: print("a is greater than b")


#Short Hand If ... Else
#If you have only one statement to execute, one for if, and one for else, you can put it all on the same line:
a = 24
b = 330
print("a is greater than b") if a > b else print("b is greater than a")


#You can also have multiple else statements on the same line:
#One line if else statement, with 3 conditions:
a = 329
b = 328
print("a is superior than b") if a > b else print("a is equal to b") if a == b else print("a is inferior to b")


#And
#The and keyword is a logical operator, and is used to combine conditional statements:
#ExampleGet your own Python Server
#Test if a is greater than b, AND if c is greater than a:
a = 200
b = 33
c = 500
if a > b and c > a:
  print("Both conditions are True")
  
  
#Not
#The not keyword is a logical operator, and is used to reverse the result of the conditional statement:
#Test if a is NOT greater than b:
a = 33
b = 200
if not a > b:
  print("a is NOT greater than b")


#Nested If
#You can have if statements inside if statements, this is called nested if statements.
x = 21
if x > 10:
    print("Above 10,")
    if x > 20:
        print("an also above 20!")
    else:
        print("but not above 20.")
        
        
#if statements cannot be empty, but if you for some reason have an if statement with no content, put in the pass statement to avoid getting an error.
a = 33
b = 200
if b > a:
  pass
 
