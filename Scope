"""
A variable is only available from inside the region it is created. This is called scope.
"""

"""
LOCAL SCOPE
A variable created inside a function belongs to the local scope of that function, and can only be used inside that function.
"""
#Ex: a variable created inside a function is available inside a function
def myfunc():
    x = 300
    print(x)
    
myfunc()



"""
FUNCTION INSIDE A FUNCTION
As explained in the example above, the variable x is not available outside the function, but it is available for any function inside the function
"""
#Ex: the local variable can be accessed from a function within the function
def myfunc():
    x = 300
    def myinnerfunc():
        print(x)
    myinnerfunc()
    
myfunc()




"""
GLOBAL SCOPE
A variable created in the main body of the Python code is a global variable and belongs to the global scope
Global variables are available from within any scope, global and local  
"""
#Ex: a variable created outside of a function global and can be used by anyone
x = 300

def myfunc():
    print(x)
    
myfunc()

print(x)



"""
NAMING VARIABLES
If you operate with the same variable name inside and outside of a function, Python will treat them as two separate variables, one available in the global scope (outside the function) and one available in the local scope (inside the function) 
"""
#Ex: the function will print the local x, and then the code will print the global x
x = 300

def myfunc():
    x = 200
    print(x)
    
myfunc()
print(x)


