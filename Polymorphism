"""
The word "polymorphism" means "many forms", and in programming it refers to methods/functions/operators with the same name that can be executed on many objects or classes
"""

"""
Function Polymorphism
An example of a Python function that can be used on different objects is the len() function.
"""

"""
STRING
For strings len() returns the number of characters
"""
x = "Hello World!"
print(len(x))


"""
TUPLE
For tuples len() returns the number of items in the tuple
"""
mytuple = ("apple", "banana", "cherry")
print(len(mytuple))


"""
DICTIONARY
For dictionaries len() returns the number of key/value pair in the dictionary
"""
thisdict = {
    "brand": "BYD",
    "model": "E6",
    "year": 2010
}
print(len(thisdict))




"""
CLASS POLYMORPHISM
Polymorphism is often used in Class methods, where we can have multiples classes with the same method name
For example, say we have three classes: Car, Boat, and Plane, and they all have a method called move():
"""
#Ex: different classes with the same method 
class Car:
    def __init__(self, brand, model):
        self.brand = brand
        self.model = model
        
    def move(self):
        print("Drive!")
        
class Boat:
    def __init__(self, brand, model):
        self.brand = brand
        self.model = model
        
    def move(self):
        print("Sail!")
        
class Plane:
    def __init__(self, brand, model):
        self.brand = brand
        self.model = model
        
    def move(self):
        print("Fly!")
        
car1 = Car("Ford", "Mustang") #create a Car class
boat1 = Boat("Ibiza", "Touring 20") #create a Boat class
plane1 = Plane("Boeing", "747") # create a Plane class

for x in (car1, boat1, plane1):
    x.move()
  
