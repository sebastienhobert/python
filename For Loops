#Python For Loops
#A for loop is used for iterating over a sequence (list, tuple, dictionary, set, string)

#Looping Through a String
#Even strings are iterable objects, they contain a sequence of characters
#Ex: loop through the letter in the word "banana"
for x in "banana":
    print(x)
    
    
#The break Statement
#With the break statement we can stop the loop before it has looped through all items:

#Exit the loop when x is "banana"
fruits = ["apple", "banana", "cherry"]
for x in fruits:
  print(x)
  if x == "banana":
    break

#Exit the loop when x is "banana", but this time the break comes before the print:
fruits = ["apple", "banana", "cherry"]
for x in fruits:
  if x == "banana":
    break
  print(x)


#The continue Statement
#With the continue statement we can stop the current iteration of the loop,
#and continue with the next
fruits = ["apple", "banana", "cherry"]
for x in fruits:
    if x == "banana":
        continue
    print(x)


#The range() Function
#To loop through a set of code a specified number of times, we can use the range() function, 
#The range() function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and ends at a specified number
for x in range(6):
    print(x)
#Note that range(6) is not the values of 0 to 6, but the values 0 to 5.

#The range() function defaults to 0 as a starting value, however it is possible to specify value by adding a parameter: range(2 ,6) which means value from 2 to 6 (but not including 6)
for x in range(2, 6):
    print(x)
    
#The range() function defaults to increment the sequence by 1, however it is possible to specify the increment value by adding a third parameter: range(2, 30, 3):
for x in range (2, 20, 3):
    print(x)



#Else in For Loop
#The else keyword in a for loop specifies a block of code to be executed when the loop is finished 
#Print all numbers from 0 to 5, and print a message when the loop has ended:
for x in range(6):
    print(x)
else:
    print("Finally finished")
    
#NOTE- The else bloxk will not be executed if the loop is stopped by a break statement
#Break the loop when x is 3, and see what happens with the else block:
for x in range(6):
    if x == 3: break
    print(x)
else:
    print("Finally finished!")


#Nested Loops
#A nested loop is a loop inside a loop.
#The "inner loop" will be executed one time for each iteration of the "outer loop"
#Example: print each adjective for every fruit.
adj = ["red", "big", "tasty"]
fruits = ["apple", "banana", "cherry"]
for x in adj:
    for y in fruits:
        print(x, y)
