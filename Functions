#Python Functions
#A function is a block of code which only runs when it is called.
#You can pass data, known as parameters, into a function.
#A function can return data as a result.

#Creating a function
#In Python a function is defined using the def keyword:
def my_function():
    print("Hello from a function")


#Calling a Function
#To call a function, use the function name followed by parenthesis:
def my_function():
  print("Hello from a function")
my_function()



#Arguments
#Information can be passed into functions as arguments.
#Arguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, just separate them with a comma.
#The following example has a function with one argument (fname). When the function is called, we pass along a first name, which is used inside the function to print the full name
def my_function(fname):
    print(fname + " from THREE KINGDOMS")
my_function("liu bei")
my_function("cao cao")
my_function("zhuge liang")



#Parameters or Arguments?
#The terms parameter and argument can be used for the same thing: information that are passed into a function
#From a function's perspective:
#-A parameter is the variable listed inside the parentheses in the function definition
#-An argument is the value that is sent to the function when it is called

#Number of arguments 
#By default, a function must be called with the correct number of arguments. 
#Meaning that if your function expects two arguments, you have to call the function with 2 arguments, not more nor less.
#Example- This function expects 2 arguments, and gets 2 arguments:
def my_function(fname, lname):
    print(fname + " " + lname)
    
my_function("Sebastien Ho", "Beverly Zhu")


#If you try to call the function with 1 or 3 arguments, you'll get an error:
def my_function(fname, lname):
    print(fname + " " + lname)
    
my_function("Nana Ouyang")



#Arbitrary Arguments, *args
#If you do not know how many arguments that will be passed into your function, add a * before the parameter name in the function 
#This way the function will receive a tuple of arguments, and can access the items accordingly:
#If the number of arguments is unknown, add a * before the parameter name:
def function(*pokemon):
    print("The most powerful Pokemon is " + pokemon[0])
    
function("Rayquaza", "Dialga", "Metagross", "Magikarp") 



#Keyword Arguments
#You can also send arguments with the key = value syntax
#This way the order of the arguments does not matter
def pokemon(pok1, pok2, pok3):
  print("The most popular 'Pokemon Starter' is " + pok2)
pokemon(pok1 = "bulbasaur", pok2 = "charmander", pok3 = "squirtle")



"""
Arbitrary Keyword Arguments, **kwargs
If you don't know how many keyword arguments that will be passed into your function, add two asterisks ** 
before the parameter name in the function definition.

This way the function will receive a dictionary of arguments, and can access the items accordingly:  

Ex: if the number of keyword arguments is unknown, add a double ** before the parameter number: 
"""
def genshin_impact(**character):
    print(character["name2"] + "is a five-star characters")
    
genshin_impact(name1 = "Qiqi", name2 = "Venti ") 
