"""
Python is an oriented programming language
Almost everything in Python is an object, with its properties and methods
A class is like an object constructor, or a blueprint for creating objects
"""

"""
To create a class, use the keyword class
Ex: create a class named MyClass, with a property named x:
"""
class Myclass:
    x = 5


"""
CREATE AN OBJECT
Now we can use the class named MyClass to create objects
Ex: create an object named p1m and print the value of x:
"""
class Myclass:
    x = 5
p1 = MyClass()
print(p1.x) //sensé print 5 mais ça fait rien ...


"""
The __init__() Function
The examples above are classes and objects in their simplest form, and are not really useful in IRL applications.
To understand the meaning of classes we have to understand the built-in __init__() function.
All classes have a function called __init__(), which is always executed when the class is being initiated.
Use the __init__() function to assign values to object properties, or other operations that are necessary to do when the object is being created:
Ex: create a class named Person, use the __init__() function to assign values for name and age
"""
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
        
p1 = Person("Sebastien", 26)

print(p1.name)
print(p1.age)
        


"""
The __str__() Function
The __str__() function controls what should be be returned when the class object is represented as a string.
If the __str__() function is not set, the string representation of the object is returned
Ex: the string representation of an object WITHOUT the __str__() function
"""
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
p1 = Person("John", 36) 
print(p1)
