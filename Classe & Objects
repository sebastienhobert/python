"""
Python is an oriented programming language
Almost everything in Python is an object, with its properties and methods
A class is like an object constructor, or a blueprint for creating objects
"""

"""
To create a class, use the keyword class
Ex: create a class named MyClass, with a property named x:
"""
class Myclass:
    x = 5


"""
CREATE AN OBJECT
Now we can use the class named MyClass to create objects
Ex: create an object named p1m and print the value of x:
"""
class Myclass:
    x = 5
p1 = MyClass()
print(p1.x) //sensé print 5 mais ça fait rien ...


"""
The __init__() Function
The examples above are classes and objects in their simplest form, and are not really useful in IRL applications.
To understand the meaning of classes we have to understand the built-in __init__() function.
All classes have a function called __init__(), which is always executed when the class is being initiated.
Use the __init__() function to assign values to object properties, or other operations that are necessary to do when the object is being created:
Ex: create a class named Person, use the __init__() function to assign values for name and age
"""
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
        
p1 = Person("Sebastien", 26)

print(p1.name)
print(p1.age)
        


"""
The __str__() Function
The __str__() function controls what should be be returned when the class object is represented as a string.
If the __str__() function is not set, the string representation of the object is returned
Ex: the string representation of an object WITHOUT the __str__() function
"""
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
p1 = Person("John", 36) 
print(p1)



"""
Ex: The string representation of an object WITH the __str__() function
"""
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    def __str__(self):
        return f"{self.name}({self.age})"
p1 = Person("John", 36)
print(p1)



"""
OBJECT METHODS
Objects can also contain methods. Methods in objects are functions that belong to the object.
Let us create a method in the Person class
Ex: insert a function that prints a greeting, and execute it on the p1 object:
"""
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
        
    def myfunc(self):
        print("Hello my name is " + self.name)
        
p1 = Person("Sebastien", 26)
p1.myfunc()



"""
THE SELF PARAMETER 
The self parameter is a reference to the current instance of the class, and is used to access variables that belongs to the class
It doesn't have to be named self, you can call it whatever you like, but it has to be the first parameter of any function in the class
Ex: use the words mysillyobject and abc instead of self
"""
class Person:
    def __init__(mysillyobject, name, age):
        mysillyobject.name = name
        mysillyobject.age = age
        
    def myfunc(abc):
        print("Hello my name is " + abc.name)
        
p1 = Person("John", 36)
p1.myfunc()



"""
Modify  Object Properties 
You can modify properties on objects like this
EX: set the age of p1 to 40:
"""
p1.age = 40



"""
Delete Object Properties
You can delete properties on objects by using the del keyword
Ex: delete the age property from the p1 object
"""
del p1.age



"""
DELETE OBJECTS
You can delete objects by using the del keyword
Ex: delete the p1 object
"""
del p1



"""
THE PASS STATEMENT 
class definitions cannot be empty, but if you for some reason have a class definition with no content, put in the pass statement to avoid getting an error 
"""
class Person:
    pass
