23/03/2024

# Removing Array Elements
# You can use the pop() method to remove an element from the array
# Ex: delete the second element of the cars array
cars = ["BYD", "Toyota", "Hyundai"]
cars.pop(1)
print(cars)

22/03/2024

# Adding Array Elements
# You can use the append() method to add an element to an array
# Ex: add one more element to the cars array
cars = ["BYD", "Toyota", "Hyundai"]
cars.append("MG")
print(cars)

21/03/2024

# The length of an array
# Use the len() method to return the length of an array (no of element in an array)
# Ex : return the number of elements in the cars array:
cars = ["Ford", "Volvo", "BMW"]
x = len(cars)
print(x)

# Looping array elements
# You can use the "for in" loop to loop through all the elements of an array
# Ex: print each item in the cars array
cars = ["Toyota", "Mazda", "Kia", "BYD"]
for x in cars:
    print(x)

20/03/2024

# Arrays are used to store multiple values in one single variable
# Create an array containing car names:
cars = ["Toyota", "MG", "BYD"]

# What is an array?
# An array is a special variable, which can hold more than one value at a time
# If you have a list of items (ex: car names) storing the cars in a single variable could look like this
car1 = "Toyota"
car2 = "MG"
car3 = "BYD"

# However, what if you want to loop through the cars and find a specific one? and what if you had not 3 cars but 300?
# The solution is an array!
# An array can hold many values under a single name, and you can access the value by referring to an index number

# Access the elements of an array
# You refer to an array element by referring to the index number
# Ex: get the value of the first array item
cars = ["Toyota", "MG", "BYD"]
cars[0] = "BYD"
print(cars)

19/03/2024

# Access element at index 2
arr = [1, 2, 3, 4]
print(arr[2])

# Print "W" at index 7
a = "Hello, World!"
print(a[7])

18/03/2024

"""
----------------------------
Define function 'getInteger'
----------------------------
(1) Prompt the user to enter a number through the input() function
NOTE:
- the entered value is then converted to an INTEGER using int()
- the result is stored in the variable 'number'

(2) Finally, the function returns the entered integer

----------------------
Define function 'Main'
----------------------
(1) It calls the getInteger() function and assigns its return value to the variable 'output'
(2) It prints the value of 'output'

-----------------------------------
Use the special variable '__name__'
-----------------------------------
(1) It checks whether the script is being run as the main program (not imported as a module)
(2) If the condition is true, it calls the Main() function
NOTE:
- this is a common practice in Python to ensure that the code inside the Main() function is executed only when the script is run directly, not when it's imported as a module
"""
def getInteger():
    number = int(input("Enter a number: "))
    return number

def Main():
    output = getInteger()
    print(output)

if __name__=="__main__":
    Main()

17/03/2024

# Import a library called 'random' and print a random number between 1 to 100
# 'randrange' is a method
import random
print(random.randrange(1, 100))

16/03/2024

# Sort the list alphabetically
fruits = ["orange", "mango", "kiwi", "pineapple", "banana"]
fruits.sort()
print(fruits)

# Sort the list numerically
numbers = [100, 50, 65, 82, 23]
numbers.sort()
print(numbers)

# Sort the list descending
fruits = ["orange", "mango", "kiwi", "pineapple", "banana"]
fruits.sort(reverse=True)
print(fruits)

# Sort this list, but observe how capital letters are messing up the sort() method
fruits = ["banana", "Orange", "Kiwi", "cherry"]
fruits.sort()
print(fruits)

# Perform a case-insensitive sort of the list
fruits = ["banana", "Orange", "Kiwi", "cherry"]
fruits.sort(key = str.lower)
print(fruits)

# Reverse the order of the list items
fruits = ["banana", "Orange", "Kiwi", "cherry"]
fruits.reverse()

15/03/2024

# Delete the entire list
countries = ["france", "usa", "canada", "china", "japan", "south korea"]
del countries
print(countries)

# Clear the list content
countries = ["france", "usa", "canada", "china", "japan", "south korea"]
countries.clear()
print(countries)

14/03/2024

#Ex: remove the first item using keyword "del"
countries = ["france", "usa", "canada", "china", "japan", "south korea"]
del countries[0]
print(countries)

13/03/2024

#Ex: remove the last item
countries = ["france", "usa", "canada", "china", "japan", "south korea"]
countries.pop()
print(countries)

12/03/2024

#Ex: remove the first item
countries = ["france", "usa", "canada", "china", "japan", "south korea"]
countries.pop(0)
print(countries)

11/03/2024

#Ex: remove the first occurrence of "usa"
countries = ["france", "usa", "canada", "china", "japan", "usa", "south korea", "usa", "usa"]
countries.remove("usa")
print(countries)

10/03/2024

#Ex: remove "usa"
countries = ["france", "usa", "canada", "china", "japan", "south korea"]
countries.remove("usa")
print(countries)

09/03/2024

# Return "orange" instead of "banana"
fruits = ["apple", "banana", "cherry", "banana", "kiwi", "mango", "banana"]
newlist = [x if x != "banana" else "orange" for x in fruits]
print(newlist)

08/03/2024

# Set all values in the new list to "eleve"
coursdechinois = ["sebastien", "lysa", "alice", "francois", "sophie"]
coursdechinoisAllValuesToEleve = ["eleve" for x in coursdechinois]
print(coursdechinoisAllValuesToEleve)

07/03/2024

# Set the values in the new list to upper case
coursdechinois = ["sebastien", "lysa", "alice", "francois", "sophie"]
coursdechinoisMAJ = [x.upper() for x in coursdechinois]
print(coursdechinoisMAJ)

06/03/2024

# CLASS DEFINITION - Define a class named "Dog" with two class attributes, attr1 named mammal and attr2 named dog
# METHOD DEFINITION - Define a method named "fun" taking parameter self to represent instance of the class
# METHOD IMPLEMENTATION - Inside the method "fun", print the values of the class attributes by calling the method
# OBJECT CREATION - Create an instance of the "Dog" class and assign it to the variable "Roger"
# METHOD INVOCATION - Call the fun method of the Dog class on the Rodger object
class Dog:
    attr1 = "mammal"
    attr2 = "dog"
    def fun(self):
        print(self.attr1)
        print(self.attr2)
Rodger = Dog()
Rodger.fun()

# Print the value of the attribute attr1 for the object "Rodger"
print(Rodger.attr1)

05/03/2024

# Accept only numbers lower than 8
list = [x for x in range(10) if x < 8]
print(list)

04/03/2024

# Use the range() function to create an iterable (1, 2, 3, 4 .. to 9)
list = [x for x in range(10)]
print(list)

03/03/2024

# ITERATE KEYWORD - for
# Use "for" and declare range to ten
# Print i
# Break if i equals to six
# Print final result
for i in range(10):
    print(i,  end=" ")
    if i == 6:
        break
print()


# ITERATION KEYWORD - while
# Set i to zero
# Use "while" where i strictly inferior to ten
# If i is equal to six
# Increment by one
# Continue
# Else
# Print i
# Increment i 
i = 0
while i < 10:
    if i == 6:
        i += 1
        continue
    else:
        print(i, end = " ")
    i += 1

02/03/2024

# Display a new list containing only names with letter "a", but using list comprehension
# (With list comprehension, you can do this with one line of code)
coursdechinois = ["sebastien", "lysa", "alice", "francois", "sophie"]
coursdechinoisA = [x for x in coursdechinois if "i" in x]
print(coursdechinoisA)

01/03/2024

# Display a new list containing only names with letter "a", but using for loop
coursdechinois = ["sebastien", "lysa", "francois", "sophie"]
coursdechinoisA = []
for x in coursdechinois:
    if "a" in x:
        coursdechinoisA.append(x)
print(coursdechinoisA)

17/02/2024

# Use the range() function to create an iterable (1, 2, 3, 4 .. to 9)
list = [x for x in range(10)]
print(list)

15/02/2024

# Only accept items that are not "beisong"
coursdechinois = ["sebastien", "lysa", "alice", "francois", "sophie", "beisong"]
coursdechinoisOK = [x for x in coursdechinois if x != "beisong"]
print(coursdechinois)
print(coursdechinoisOK)

14/02/2024

# Display a new list containing only names with letter "o", but using list comprehension
# (With list comprehension, you can do this with one line of code)
coursdechinois = ["sebastien", "lysa", "alice", "francois", "sophie"]
coursdechinoisA = [x for x in coursdechinois if "o" in x]
print(coursdechinoisA)

13/02/2024

# Display a new list containing only names with letter "a", but using for loop
coursdechinois = ["sebastien", "lysa", "francois", "sophie"]
coursdechinoisA = []
for x in coursdechinois:
    if "a" in x:
        coursdechinoisA.append(x)
print(coursdechinoisA)

12/02/2024

# Print all items (list comprehension offering shortest syntax for looping through list)
iamnobody = ["zhangchulan", "fengbaobao", "wangye", "zhugeqing", "zhanglingyu"]
[print(x) for x in iamnobody]

11/02/2024

# Print all items, using a while loop to go through all the index numbers
iamnobody = ["zhangchulan", "fengbaobao", "wangye", "zhugeqing", "zhanglingyu"]
i = 0 # Start at zero
while i < (len(iamnobody)): # len() to determine length of list
    print(iamnobody[i]) # Loop through list items by referring to their indexes
    i = i + 1 # Remember to increase the index by 1 after each iteration

10/02/2024

# Print all items referring to their index number
iamnobody = ["zhangchulan", "fengbaobao", "wangye", "zhugeqing", "zhanglingyu"]
for i in range(len(iamnobody)): # The iterable created is [0, 1, 2, 3, 4]
    print(iamnobody[i])

09/02/2024

# Print all items in the list, one by one
iamnobody = ["zhangchulan", "fengbaobao", "wangye", "zhugeqing", "zhanglingyu"]
for x in iamnobody:
    print(x)

08/02/2024

# Join two list by extending
list1 = ["a", "b", "c"]
list2 = [1, 2, 3]
list1.extend(list2)
print(list1)

07/02/2024

# Join two lists by appending
list1 = ["a", "b", "c"]
list2 = [1, 2, 3]
for x in list2:
    list1.append(x)
print(list1)

06/02/2024

# Join two list
list1 = ["a", "b", "c"]
list2 = [1, 2, 3]
list3 = list1 + list2
print(list3)

05/02/2024

# Make a copy of a list with the copy() method
fruits = ["apple", "banana", "cherry"]
copyoffruits = fruits.copy()
print(copyoffruits)

# Make a copy of a list with the list() method
fruits = ["apple", "banana", "cherry"]
methodfruits = list(fruits)
print(methodfruits)

04/02/2024

# Add elements of a tuple to a list
list = ["square", "rectangle", "cube"]
tuple = ("circle", "oval", "disk")
list.extend(tuple)
print(list)

03/02/2024

# Add the elements of otherphones to chinesephones
chinesephones = ["huawei", "xiaomi", "oppo", "vivo"]
otherphones = ["apple", "samsung"]
chinesephones.extend(otherphones)
print(chinesephones)

02/02/2024

# Insert item as 3rd position
list = ["huawei", "xiaomi", "oppo", "vivo"]
list.insert(2, "samsung")
print(list)

01/02/2024

# Add item to the end of the list
list = ["gauffre", "pain", "gateau"]
list.append("galette")
print(list)

