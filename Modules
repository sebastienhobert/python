"""
WHAT IS A MODULE? 
Consider a module to be the same as a code library.
A file containing a set of functions you want to include in your application.
"""

"""
CREATE A MODULE
To create a module just save the code you want in a file wit the the extension .py:
"""

#Ex: save this code in a file named mymodule.py
def greeting(name):
    print("Hello," + name)


"""
USE A MODULE
Now we can use the module we just created, by using the import statement 
"""
#Ex: import the module named mymodule, and call the greeting function
import mymodule

mymodule.greeting("Sebastien")




"""
VARIABLES IN MODULE
The module can contain functions, as already described, but also variables of all types (arrays, dictionaries, objects etc.)  
"""

#Ex: save this code in the file mymodule.py
person1 = {
  "name": "John",
  "age": 36,
  "country": "Norway"
}

#Ex: import the module named mymodule, and access the person1 dictionary
import mymodule

a = mymodule.person1["age"]
print(a)



"""
NAMING A MODULE
You can name the module file whatever you like, but it must have the file extension .py

RE-NAMING A MODULE
You can create an alias when you import a module, by using the as keyword
"""

#Ex: create an alias for mymodule called mx
import mymodule as mx
a = mx.person1["age"]
print(a)



"""
BUILT-IN MODULES
There are several built-in modules in Python, which you can import whenever you like
"""
#Ex: import and use the platform module
import platform

x = platform.system()
print(x)




"""
USING THE DIR() FUNCTION
There is a built-in function to list all the function names (or variables) in a module. 
"""
#Ex: list all the defined names belonging to the platform module
import platform

x = dir(platform)
print(x)




"""
IMPORT FROM MODULE
You can choose to import only parts from a module, by using the from keyword
"""
#Ex: the module named mymodule has one function and one dictionary
def greeting(name):
    print("Hello, " + name)
    
person1 = {
    "name": "Georgie",
    "age": 17,
    "county": "Texas"
}
