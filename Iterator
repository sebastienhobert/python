"""
An iterator  is an object that contains a countable number of values.
An iterator is an object that can be iterated upon, meaning that you can traverse through all the values.
Technically, in Python, an interator is an object which implements the iterator protocol, which consists of the method __iter__() and __next__().
"""

"""
Iterator vs Iterable
Lists, tuples, dictionaries, and sets are all iterable objects. They are iterable containers which you can get an iterator from.
All these objects have a iter() method which is used to get an iterator
"""

#Ex: return an iterator from a tuple, and print each valuegfgdf
mytuple = ("apple", "banana", "cherry")
myit = iter(mytuple)
print(next(myit))
print(next(myit))
print(next(myit))

#Even strings are iterable objects, and can return an iterator

#Ex: strings are also iterable objects, containing a sequence of characters
mystr = "banana"
myit = iter(mystr)
print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))



"""
LOOPING THROUGH AN ITERATOR
We can also use a for loop to iterate through an iterable object
"""
#Ex: iterate the value of a tuple 
mytuple = ("apple", "banana", "cherry")

for x in mytuple:
    print(x)


#Ex: iterate the characters of a string
mystr = "banana"

for x in mystr:
    print(x)
    
    
    
    
"""
TO CREATE AN ITERATOR

To create an object/class as an iterator you have to implement the methods __iter__() and __next__() to your object.

As you have learned in the Python Classes/Objects chapter, all classes have a function called __init__(), which allows you to do some initializing when the method is created

The __iter__() method acts similar, you can do operations (initialising etc.) but must always return the iterator object itself

The __next__() method also allows you to do operations, and must return the next item in the sequence

"""
#Ex:  create an iterator that returns numbers, starting with 1, and each sequence will increase by one (returning 1,2,3,4,5) etc.
class MyNumbers:
    def __iter__(self):
        self.a = 1
        return self
    def __next__(self):
        x = self.a
        self.a += 1
        return x
    
myclass = MyNumbers()
myiter = iter(myclass)

print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))
