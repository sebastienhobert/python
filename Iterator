"""
An iterator  is an object that contains a countable number of values.
An iterator is an object that can be iterated upon, meaning that you can traverse through all the values.
Technically, in Python, an interator is an object which implements the iterator protocol, which consists of the method __iter__() and __next__().
"""

"""
Iterator vs Iterable
Lists, tuples, dictionaries, and sets are all iterable objects. They are iterable containers which you can get an iterator from.
All these objects have a iter() method which is used to get an iterator
"""

#Ex: return an iterator from a tuple, and print each value
mytuple = ("apple", "banana", "cherry")
myit = iter(mytuple)
print(next(myit))
print(next(myit))
print(next(myit))

#Even strings are iterable objects, and can return an iterator

#Ex: strings are also iterable objects, containing a sequence of characters
mystr = "banana"
myit = iter(mystr)
print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))



"""
LOOPING THROUGH AN ITERATOR
We can also use a for loop to iterate through an iterable object
Ex: iterate the value of a tuple 
"""
mytuple = ("apple", "banana", "cherry")

for x in mytuple:
    print(x)
