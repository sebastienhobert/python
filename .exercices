---------------------------------------------------------------------------------------------------------------------------------

# HACKERRANK | DIVMOD

# INPUT 
# 200
# 5

# OUTPUT
# Enter your first number: 200
# Enter your second number: 5
# 40
# 0
# (quotient is 40, remainder is 0)


SOLUTION
a = (int(input("Enter your first number: ")))
b = (int(input("Enter your second number: ")))

print(a//b)
print(a%b)
print(f"(quotient is {a//b}, remainder is {a%b})")

---------------------------------------------------------------------------------------------------------------------------------

# WHILE
# Print 'i' as long as 'i' is less than 6.
# OUTPUT
# 1
# 2
# 3
# 4
# 5


# SOLUTION
i = 1
while i < 6:
    print(i)
    i += 1

---------------------------------------------------------------------------------------------------------------------------------

# WHILE (BREAK STATEMENT)
# Exit the loop when i is 3:
# OUTPUT
# 1
# 2
# 3
i = 1
while i < 6:
    print(i)
    i += 1


# SOLUTION
i = 1
while i < 6:
    print(i)
    if i == 3:
        break
    i += 1

---------------------------------------------------------------------------------------------------------------------------------

# WHILE (CONTINUE STATEMENT)
# With the continue statement we can stop the current iteration and continue with the next.
# Stop when i == 3 then continue the iteration.
# OUTPUT
# 1
# 2
# 4
# 5
# 6
i = 0
while i < 6:


# SOLUTION
i = 0
while i < 6:
    i += 1
    if i == 3:
        continue
    print(i)

---------------------------------------------------------------------------------------------------------------------------------

# WHILE (ELSE STATEMENT)
# With the else statement we can run a block of code when the condition is no longer true.
# Print a message once the condition is false == when 'i' is no longer less than 6.
# OUTPUT 
# 1
# 2
# 3
# 4
# 5
# 'i' is no longer less than 6 


# SOLUTION
i = 1
while i < 6:
    print(i)
    i += 1
else:
    print("'i' is no longer less than 6.")

---------------------------------------------------------------------------------------------------------------------------------

# WHILE IN TUPLE 
# Print elements of the tuple using a 'while' Loop
# OUTPUT 
# apple
# banana
# cherry
thistuple = ("apple", "banana", "cherry")


# SOLUTION
thistuple = ("apple", "banana", "cherry")
i = 0
while i < len(thistuple):
    print(thistuple[i])
    i += 1

---------------------------------------------------------------------------------------------------------------------------------

# FOR
# Loop through the index numbers.
# Print the index numbers with their corresponding elements.
# OUTPUT
# 0 apple
# 1 banana
# 2 cherry
thistuple = ("apple", "banana", "cherry")


# SOLUTION
thistuple = ("apple", "banana", "cherry")
for i in range(len(thistuple)):
    print(i, thistuple[i])

---------------------------------------------------------------------------------------------------------------------------------

# string format()
# OUTPUT = I want 3 pieces of item number 567 for 51.00 dollars.
quantity = 3
itemno = 567
price = 51


SOLUTION
# Use of '{:.2f}' to display numbers with two decimals
quantity = 3
itemno = 567
price = 51
myorder = "I want {0} pieces of item number {1} for {2:.2f} dollars."
print(myorder.format(quantity, itemno, price))

---------------------------------------------------------------------------------------------------------------------------------

# Print all vocabulary that contains four words.
# OUTPUT = These have 4 words: ['双重标准', '和平过渡']
vocabulary_list: list[str] = ['双重标准', '正式', '和平过渡', '羽绒服', '娇气', '征收', '宰', '葬']


# SOLUTION
vocabulary_list: list[str] = ['双重标准', '正式', '和平过渡', '羽绒服', '娇气', '征收', '宰', '葬']

four_words: list[str] = []
for word in vocabulary_list:
    if len(word) > 3:
        four_words.append(word)

print(f"These have 4 words: {four_words}")

---------------------------------------------------------------------------------------------------------------------------------

# HACKERRANK 
# Convert uppercase letters to lowercase and vice versa.
# Ask the user for input.
INPUT: Blue Sky
OUTPUT: bLUE sKY


# SOLUTION
def swap_case(s):
    return s.swapcase() # Call the swapcase() method on string 's'

s = input("Enter your string: ")
result = swap_case(s)
print(result)

---------------------------------------------------------------------------------------------------------------------------------

# Split the text.
# OUTPUT = ['welcome', 'to', 'the', 'jungle']
txt = "welcome to the jungle"


# SOLUTION
txt = "welcome to the jungle"
x = txt.split()
print(x)

---------------------------------------------------------------------------------------------------------------------------------

# Perform an alphabetical sort of the list.
list = ["banana", "orange", "kiwi", "cherry"]


# SOLUTION
list = ["banana", "orange", "kiwi", "cherry"]
list.sort()
print(list)

---------------------------------------------------------------------------------------------------------------------------------

# Perform a case-insensitive sort of the list.
list = ["banana", "Orange", "Kiwi", "cherry"]


# SOLUTION
list = ["banana", "orange", "kiwi", "cherry"]
list.sort(key = str.lower)
print(list)

---------------------------------------------------------------------------------------------------------------------------------

# Perform a reverse sort of the list.
list = ["banana", "orange", "kiwi", "cherry"]


# SOLUTION
list = ["banana", "orange", "kiwi", "cherry"]
list.sort(reverse = True)
print(list)

---------------------------------------------------------------------------------------------------------------------------------

# Sort the list based on how close the number is to 50.
list = [100, 52, 65, 82, 23]


# SOLUTION
list = [100, 52, 65, 82, 23]
def func(n):
    return abs(n - 50)
list.sort(key = func)
print(list)

---------------------------------------------------------------------------------------------------------------------------------

# Sort the list based on how close the number is to 50.
list = [100, 50, 65, 82, 23]


# SOLUTION
def func(n):
    return abs(n - 50)

list = [100, 54, 65, 82, 23]
list.sort(key = func)
print(list)

---------------------------------------------------------------------------------------------------------------------------------

# Slicing
# Print 'Word'
a = "Hello, World!"


# SOLUTION
a = "Hello, World!"
print(a[7:12])

---------------------------------------------------------------------------------------------------------------------------------

# What is removed in the list? 
mySet = {"apple", "banana", "cherry"}
mySet.pop()
print(mySet)


# ANSWER
# This method will remove a random item, so you cannot be sure what item that gets removed.

---------------------------------------------------------------------------------------------------------------------------------

# Joining two sets
# Keep only the duplicates.
# OUTPUT = {'apple'}
x = {"apple", "banana", "cherry"}
y = {"google", "microsoft", "apple"}


# SOLUTION 1
# The intersection_update() method will keep only the items that are present in both sets
x = {"apple", "banana", "cherry"}
y = {"google", "microsoft", "apple"}
x.intersection_update(y)
print(x)

# SOLUTION 2
# The intersection() method will return a new set
x = {"apple", "banana", "cherry"}
y = {"google", "microsoft", "apple"}
z = x.intersection(y)
print(z)

---------------------------------------------------------------------------------------------------------------------------------

# Why is '1' is not appearing in the result?
thisset = {"apple", "banana", "cherry", True, 1, 2}
print(thisset)


# ANSWER
True and 1 is considered the same value and are treated as duplicates.

---------------------------------------------------------------------------------------------------------------------------------

# What is the result of the following code? why?
thisset = {"apple", "banana", "cherry", "apple"}
print(thisset)


# ANSWER
Sets cannot have two items with the same value.

---------------------------------------------------------------------------------------------------------------------------------

# Checking if a word is present in a list?
# Check if the word 'channel' is present in the following list.
# OUTPUT POSSIBLE = False
# OUTPUT POSSIBLE = True
list = ['bricks', 'neutrals', 'criticism', 'enjoyment', 'witches', 'embarrassment', 'creations', 'education', 'ceiling', 'ruin', 'retailer', 'midst', 'hand', 'transaction', 'reminders', 'harmony', 'suppression', 'side', 'cruise', 'gardens', 'snowflake', 'lightning', 'rage', 'punishment', 'strategy', 'spectator', 'muscles', 'wheel', 'discovery', 'leakage']


# SOLUTION
list = ['bricks', 'neutrals', 'criticism', 'enjoyment', 'witches', 'embarrassment', 'creations', 'education', 'ceiling', 'ruin', 'retailer', 'midst', 'hand', 'transaction', 'reminders', 'harmony', 'suppression', 'side', 'cruise', 'gardens', 'snowflake', 'lightning', 'rage', 'punishment', 'strategy', 'spectator', 'muscles', 'wheel', 'discovery', 'leakage']
print("channel" in list)

---------------------------------------------------------------------------------------------------------------------------------

# Printing results with incremental value
# Print each element from the list with the word 'fruit' and a following incremental number.
# OUTPUT
# fruit1
# fruit2
# fruit3
list = ["apple", "banana", "cherry"]


# SOLUTION
list = ["apple", "banana", "cherry"]
counter = 0
for x in list:
    print(f"fruit{counter}")
    counter += 1

---------------------------------------------------------------------------------------------------------------------------------

# Adding items from one set to another set
# Add items from 'tropical_fruits' set into the 'fruits' set.
# OUTPUT
# {'apple', 'papaya', 'rambutan', 'banana', 'cherry', 'mango'}
fruits = {"apple", "banana", "cherry"}
tropical_fruits = {"mango", "papaya", "rambutan"}


# SOLUTION 1
fruits = {"apple", "banana", "cherry"}
tropical_fruits = {"mango", "papaya", "rambutan"}
fruits.update(tropical_fruits)
print(fruits)

# SOLUTION 2
fruits = {"apple", "banana", "cherry"}
tropical_fruits = {"mango", "papaya", "rambutan"}
all_fruits = fruits.union(tropical_fruits)
print(all_fruits)

---------------------------------------------------------------------------------------------------------------------------------

# HACKERRANK | Sequence of numbers from 0 to n | Square of each number 
# Ex: The list of non-negative integers that are less than n = 3 is [0, 1, 2].
# Print the square of each number on a separate line.
# INPUT = 5
# OUTPUT
# 0
# 1
# 4
# 9
# 16


# SOLUTION
def square(n):
    return "\n".join(str(i * i) for i in range(0, n))

n = int(input("Enter your number: "))
print(square(n))

---------------------------------------------------------------------------------------------------------------------------------

# Creating a loop that iterates over the indices of the list 
# For each index 'i', print the element at that index in the list (which is 0 to 3 in this case).
# OUTPUT 
# apple
# orange
# strawberry
# tomato
thislist = ["apple", "orange", "strawberry", "tomato"]


# SOLUTION
# Loop through the list items by referring to their index number
# Use the range() and len() functions to create a suitable iterable
thislist = ["apple", "orange", "strawberry", "tomato"]
for i in range (len(thislist)):
    print(thislist[i])

---------------------------------------------------------------------------------------------------------------------------------

# HACKERRANK | Sequence of numbers from 1 to n
# Generate a sequence of numbers from 1 to n concatenated together as a string.
# Include user input.
# INPUT = 3
# OUTPUT = 123


# SOLUTION
def number_sequence(n):
    return " ".join(str(i) for i in range(1, n + 1))

# Getting user input
n = int(input("Enter a number: "))

# Printing the output
print(number_sequence(n))

---------------------------------------------------------------------------------------------------------------------------------

# Define a Python function that calculates the square of a given number and then prints the result using a function call.
# INPUT = 3
# OUTPUT = 9


# SOLUTION
# function definition
def find_square(num):
    result = num * num
    return result

# function call
square = find_square(3)
print("Square:", square)

---------------------------------------------------------------------------------------------------------------------------------

# Write a function that takes a single parameter x and returns the result of multiplying x by 5. Then, call this function with the argument 3 and print the result.
# INPUT = 3
# OUTPUT = 15


# SOLUTION
def my_function(x):
  return 5 * x

print(my_function(3))

---------------------------------------------------------------------------------------------------------------------------------

# Based on list fruits, create a new list containing only the fruits with the letter "a" in the name.
# OUTPUT
# ["apple", "banana", "mango"]
fruits = ["apple", "banana", "cherry", "kiwi", "mango"]

# SOLUTION 1 
fruits = ["apple", "banana", "cherry", "kiwi", "mango"]
newlist = []
for x in fruits:
    if "a" in x:
        newlist.append(x)
print(newlist)

# SOLUTION 2 == list comprehension
fruits = ["apple", "banana", "cherry", "kiwi", "mango"]
newlist = [x for x in fruits if "a" in x]
print(newlist)
