"""
THE DIFFERENCE BETWEEN COPY AND VIEW

The main difference between a copy and a view of an array is that:
- the copy is a new array
- the view is just a view of the original array

The copy owns the data and any changes made to the copy will not affect original array, and any changes made to the original array will not affect the copy

The view does not own the data and any changes made to the view will affect the original array, and any changes made to the original array will affect the view
"""



"""
COPY
"""
# Ex: make a copy, change the original array, and display both arrays
import numpy as np
arr = np.array([1, 2, 3, 4, 5])
x = arr.copy()
arr[0] = 42
print(arr)
print(x)
# The copy SHOULD NOT be affected by the changes made to the original array



"""
VIEW
"""
# Ex: make a view, change the original array, and display both arrays
import numpy as np
arr = np.array([1, 2, 3, 4, 5])
x = arr.view()
arr[0] = 42
print(arr)
print(x)
#The view SHOULD be affected by the changes made to the original array



"""
MAKE CHANGES IN THE VIEW
"""
# Ex: make a view, change the view, and display both arrays
import numpy as np
arr = np.array([1, 2, 3, 4, 5])
x = arr.view()
x[0] = 31
print(arr)
print(x)
# The original array SHOULD be affected by the changes made to the view



"""
CHECK IF ARRAY OWN THE DATA
As mentioned above, copies own the data, and views does not own the data, but how can we check this?
Every NumPy array has the attribute base that returns None if the array owns the data.
Otherwise, the base attribute refers to the original object.
"""
# Ex: print the value of the base attribute to check if an array owns the data or not
import numpy as np
arr = np.array([1, 2, 3, 4, 5])

x = arr.copy()
y = arr.view()

print(x.base) # the copy returns None
print(y.base) # the view returns the original array



