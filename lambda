#example1
adder = lambda x, y: x + y
print (adder (1, 2))

#example2 == lambda simply returning function object, and not being called by print().
string='some kind of a useless lambda'
print(lambda string : print(string))

#example3 == the lambda is being called, and the string we pass gets printed at the console.
x="some kind of a useless lambda"
(lambda x : print(x))(x)

#source == https://www.guru99.com/python-lambda-function.html



"""
Python Lambda
A lambda function is a small anonymous function.
A lambda function can take any number of arguments, but can only have one expression.

SYNTAX
lambda arguments: expression
The expression is executed and the result is returned.
EXAMPLE- Add 10 to argument a, and return the result: 
"""
x = lambda a : a + 10
print(x(5))


"""
Lambda functions can take any number of arguments.
Ex: Multiply argument a with argument b and return the result:
"""
x = lambda a, b : a * b 
print(x(5,6))



"""
Ex: Summarise argument a, b, and c and return the result:
"""
x = lambda a, b, c : a + b + c
print(x(4, 8, 3))



"""
Why use Lambda functions?
The power of lambda is better shown when you use them as an anonymous function.
Say you have a function definition that takes one argument, and that argument will be multiplied with an unknown number:
"""
def myfunc(n):
    return lambda a : a * n 
