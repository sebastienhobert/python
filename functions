"""
Passing a List as an Argument
You can send any data types of argument to a function (string, number, list, dictionary etc.), 
and it will be treated as the same data type inside the function

Ex: if you send a List as an argument, it will still be a List when it reaches the function:
"""
def function(food):
    for x in food:
        print(x)
    
fruits = ["apple", "banana", "cherry"]
function(fruits)



"""
Return Values
To let a function return a value, use the return statement:
"""
def function(x):
    return 5 * x 
print(function(5))
print(function(10))
print(function(70))



"""
The pass Statement
function definitions cannot be empty, but if you for some reason have a function definition with no content, 
put in the pass statement to avoid getting an error.  
"""
def function():
    pass
    
    

"""
Recursion
Python also accepts function recursion, which means a defined function can call itself.
Recursion is a common mathematical and programming concept.It means that a function calls itself.
This has the benefit of meaning that you can loop through data to reach a result.
The developer should be very careful with recursion as it can be be quite easy to slip into writing a function which never terminates,
or one that uses excess amounts of memory or processor power. However when written correctly recursion can be a very efficient and mathematically-elegant approach to programming.
In this example, tri_recursion() is a function that we have defined to call itself ("recurse"). We use the k variable as a data,
which decrements (-1) every time we recurse. The recursion ends when the condition is not greater than 0 (i.e. when it is 0).
"""
def tri_recursion(k):
    if(k > 0):
        result = k + tri_recursion(k - 1)
        print(result)
    else:
        result = 0
    return result
print("\n\nRecursion Example Results")
tri_recursion(6)
