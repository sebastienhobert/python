#Ex: create a NumPy array
import numpy as np
arr = np.array([1, 2, 3, 4, 5])
print(arr)
print(type(arr))


"""
CREATE A NUMPY NDARRAY OBJECT
NumPy is used to work with arrays. The array object in NumPy is called ndarray
We can create a NumPy ndarray object by using the array() function
"""

"""
To create an ndarray, we can pass a list, tuple or any array-like object into the array() method, and it will be converted into an ndarray  
"""
#Ex: use a tuple to create a NumPy array
import numpy as np
arr = np.array((1, 2, 3, 4, 5))
print(arr)



"""
DIMENSIONS IN ARRAYS
A dimension in arrays is one level of array depth (nested arrays)
====> nested array: are arrays that have arrays as their elements
"""

"""
0-D Arrays 
0-D arrays, or Scalars, are the elements in an array. Each value in an array is a 0-D array.  
"""
#Ex: create a 0-D array with value 42
import numpy as np
arr = np.array(42)
print(arr)



"""
1-D Arrays
An erray that has 0-D arrays as its elements is called uni-dimensional or 1-D array
These are the most common and basic arrays
"""
#Ex: create a 1-D array containing the values 1,2,3,4,5
import numpy as np
arr = np.array([1, 2, 3, 4, 5])
print(arr)


"""
2-D ARRAYS
An array that has 1-D arrays as its elements is called a 2-D array
These are often used to represent matrix or 2nd order tensors
"""
#Ex: create a 2-D array containing two arrays with the values 1, 2, 3 and 4, 5, 6
import numpy as np
arr = np.array([[1, 2, 3], [4, 5, 6]])
print(arr)


"""
3-D ARRAYS
An array that has 2-D arrays (matrices) as its elements is called 3-D array
These are often used to represent a 3rd order tensor
"""
#Ex: create a 3-D array with two 2-D arrays, both containing two arrays with the values 1, 2, 3 and 4, 5, 6
import numpy as np
arr = np.array([[[1, 2, 3,], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])
print(arr)


"""
CHECK NUMBER OF DIMENSIONS?
NumPy Arrays provides the ndim attribute that returns an integer that tells us how many dimensions the array have
"""
#Ex: check how many dimensions the arrays have
import numpy as np

a = np.array(42)
b = np.array([1, 2, 3, 4, 5])
c = np.array([[1, 2, 3], [4, 5, 6]])
d = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])

print(a.ndim)
print(b.ndim)
print(c.ndim)
print(d.ndim)



"""
HIGHER DIMENSIONAL ARRAYS
An array can have any number of dimensions
When the array is created, you can define the number of dimensions by using the ndmin argument
"""
#Ex: create an array with 5 dimensions and verify that it has 5 dimensions
import numpy as np
arr = np.array([1, 2, 3, 4], ndmin=5)
print(arr)
print('number of dimensions :', arr.ndim)


"""
In this array the innermost dimension (5th dim) has 4 elements
- the 4th dimension has one element that is the vector
- the 3rd dimension has one element that is the matrix with vector
- the 2nd dimension has one element that is 3D array 
- the 1st dimension has one element that is 4D array    
"""



ACCESS ARRAY ELEMENTS
Array indexing is the same as accessing an array element
You can access an array element by referring to its index number 
The indexes in NumPy arrays start with 0, meaning that the first element has index 0, and the second has index 1 etc.
"""
#Ex: get the first element from the following array
import numpy as np
arr = np.array([1, 2, 3, 4])
print(arr[0])

#Ex: get third and fourth element from the following array and add them
import numpy as np
arr = np.array([1, 2, 3, 4])
print(arr[2] + arr[3])



"""
ACCESS 2-D ARRAYS
To access elements from 2-D arrays we can use comma separated integers representing the dimension and the index of the element
Think of 2-D arrays like a table with rows and columns, where the dimension represents the row and the index represents the column
"""
#Ex: access the element on the first row, second column
import numpy as np
arr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])
print('4th element on 2nd row: ', arr[1, 3])



"""
ACCESS 3-D ARRAYS
To access elements from 3-D arrays we can use comma separated integers representing the dimensions and the index of the element
"""
#Ex: access the third element of the second array of the first array
import numpy as np
arr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])
print(arr[0, 1, 2])
