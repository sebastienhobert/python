"""
ITERATING ARRAYS
Iterating means going through elements one by one.
As we deal with multi-dimensional arrays in numpy, we can do this using basic for loop of python.
If we iterate on a 1-D array it will go through each element one by one.
"""
#Ex: iterate on the elements of the following 1-D array
import numpy as np
arr = np.array([1, 2, 3])
for x in arr:
    print(x)


"""
ITERATING 2-D ARRAYS
In a 2-D array it will go through all the rows.
"""
#Ex: iterate on the elements of the following 2-D array
import numpy as np
arr = np.array([[1, 2, 3], [4, 5, 6]])
for x in arr:
    print(x)

"""
If we iterate on a n-D array it will go through n-1th dimension one by one.
To return the actual values, the scalars, we have to iterate the arrays in each dimension.
"""
#Ex: iterate on each scalar element of the 2-D array
import numpy as np
arr = np.array([[1, 2, 3], [4, 5, 6]])
for x in arr:
    print(x)
    for y in x:
        print(y)


"""
ITERATING 3-D ARRAYS
In a 3-D array it will go through all the 2-D arrays.
"""
#Ex: iterate on the elements of the following 3-D array
import numpy as np
arr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])
for x in arr:
    print(x)
"""To return the actual values, the scalars, we have to iterate the arrays in each dimension"""
#Ex: iterate down the scalars
import numpy as np
arr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])
for x in arr:
    for y in x:
        for z in y:
            print(z)


"""
ITERATING ARRAYS USING NDITER()
The function nditer() is a helping function that can be used from very basic to very advanced iterations.
It solves some basic issues which we face in iteration, let's go through it with examples.
"""

"""
ITERATING ON EACH SCALAR ELEMENT
In basic for loops, iterating through each scalar of an array we need to use n for loops which can be difficult to write for arrays with very high dimensionality
"""

