"""
Inheritance allows us to define a class that inherits all the methods and properties from another class 
Parent class is the class being inherited from, also called base class
Child class is the class that inherits from another class, also called derived class 
"""

"""
CREATE A PARENT CLASS
Any class can be a parent class, so the syntax is the same as creating any other class
Ex: create a class named Person with firstname and lastname properties, and a printname method: 
"""
class Person:
    def __init__(self, fname, lname):
        self.firstname = fname
        self.lastname = lname
        
    def printname(self):
        print(self.firstname, self.lastname)
        
#Use the Person class to create an object, an then execute the printname method:
x = Person("Sebastien", "HOBERT")
x.printname()



"""
CREATE A CHILD CLASS
To create a class that inherits the functionality from another class, send the parent class as a parameter when creating the child class:
Ex: create a class named Student, which will inherit the properties and methods from the Person Class:
"""
class Student(Person):
    pass
"""
Now the Student class has the same properties and methods as the Person Class
Ex: use the Student class to create an object, and then execute the printname method: 
"""
x = Student("Mike", "Olsen")
x.printname()



"""
ADD THE __INIT__() FUNCTION
So far we have created a child class that inherits the properties and methods from its parent.
We want to add the __init__() function to the child class (instead of the pass keyword).
NOTE- The __init__() function is called automatically every time the class is being used to create a new object
Ex: add the __init__() function to the Student class

class Student(Person):
    def __init__(self, fname, lname):
    
When you add the __init__() function, the child class will no longer inherit the parent's __init__() function.
The child's __init__() function overrides the inheritance of the parent's __init__() function.
To keep the inheritance of the parent's __init__() function, add a call to the parent's __init__() function.

EXAMPLE
"""
class Student(Person):
    def __init__(self, fname, lname):
        Person.__init__(self, fname, lname)  
"""
Now we have successfully added the __init__() function, and kept the inheritance of the parent class, and we are ready to add functionality in the __init__() function.
"""



"""
USE THE SUPER()FUNCTION
Python also has a super() function that will make the child class inherit all the methods and properties from its parents 
"""
class Person:
    def __init__(self, fname, lname):
        self.firstname = fname
        self.lastname = lname
        
    def printname(self):
        print(self.firstname, self.lastname)
        
    
        
class Student(Person):
    def __init__(self, fname, lname):
        super().__init__(fname, lname)
        
x = Student("Mike", "Olsen")
x.printname()
"""
By using the super() function, you do not have to use the name of the parent element, it will automatically inherit the methods and properties from its parents 
"""



"""
ADD PROPERTIES 
Ex: add a property called graduationyear to the Student class: 
"""
class Person:
    def __init__(self, fname, lname):
        self.firstname = fname
        self.lastname = lname
        
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

