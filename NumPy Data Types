"""
CHECKING THE DATA TYPE OF AN ARRAY
The NumPy array object has a property called dtype that returns the data type of an array
"""
#Ex: get the data type of an array object
import numpy as np
arr = np.array([1, 2, 3, 4])
print(arr.dtype)

#Ex: get the data type of an array containing strings
import numpy as np
arr = np.array(['apple', 'banana', 'cherry'])
print(arr.dtype)
#Result = <U6 = unicode string


"""
CREATING ARRAYS WITH A DEFINED DATA TYPE
We use the array() function to create arrays, this function can take an optional argument: dtype that allows us to define the expected data type of the array elements
"""
#Ex: create an array with data type string
import numpy as np
arr = np.array([1, 2, 3, 4 ], dtype='S')
print(arr)
print(arr.dtype)
#For example, b'1' represents the byte-string version of the number 1.


#Ex: create an array with data type 4 bytes integer
import numpy as np
arr = np.array([1, 2, 3, 4], dtype='i4') # 'i4' indicates a 32-bit integer (4 bytes)
print(arr) # Print [1 2 3 4]
print(arr.dtype) # Print int32, so the elements in the array will be represented as 32-bit integers


"""
WHAT IF A VALUE CAN'T BE CONVERTED?
If a type is given in which elements can't be casted then NumPy will raise a valueError (when the type of passed argument to a function is incorrect)
"""
#Ex: a non integer string like 'a' can't be converted to integer (will raise an error)
import numpy as np
arr = np.array(['a', '2', '3'], dtype='i')
print(arr)



"""
CONVERTING DATA TYPE ON EXISTING ARRAYS

The best way to change the data type of an existing array is to make a copy of the array with the astype() method.
The astype() function creates a copy of the array, and allows you to specify the data type as a parameter.
The data type can be specified using a string, like 'f' for float, 'i' for integer etc. or you can use the data type directly like float for float and int for integer
"""

#Ex: change data type from float to integer by using 'i' as parameter value
import numpy as np
arr = np.array([1.1, 2.1, 3.1])
newarr = arr.astype('i')
print(newarr)
print(newarr.dtype)

#Ex: change data type from float to integer by using int as parameter value
import numpy as np
arr = np.array([1.1, 2.1, 3.1])
newarr = arr.astype(int)
print(newarr)
print(newarr.dtype)

#Ex: change data type from integer to boolean
import numpy as np
arr = np.array([1, 0, 3])
newarr = arr.astype(bool)
print(newarr)
print(newarr.dtype)
